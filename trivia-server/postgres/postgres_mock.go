// Code generated by MockGen. DO NOT EDIT.
// Source: postgres.go

// Package postgres is a generated GoMock package.
package postgres

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTriviaDB is a mock of TriviaDB interface.
type MockTriviaDB struct {
	ctrl     *gomock.Controller
	recorder *MockTriviaDBMockRecorder
}

// MockTriviaDBMockRecorder is the mock recorder for MockTriviaDB.
type MockTriviaDBMockRecorder struct {
	mock *MockTriviaDB
}

// NewMockTriviaDB creates a new mock instance.
func NewMockTriviaDB(ctrl *gomock.Controller) *MockTriviaDB {
	mock := &MockTriviaDB{ctrl: ctrl}
	mock.recorder = &MockTriviaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriviaDB) EXPECT() *MockTriviaDBMockRecorder {
	return m.recorder
}

// AddTrivia mocks base method.
func (m *MockTriviaDB) AddTrivia(ctx *context.Context, newTrivia *Trivia, audioFileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrivia", ctx, newTrivia, audioFileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrivia indicates an expected call of AddTrivia.
func (mr *MockTriviaDBMockRecorder) AddTrivia(ctx, newTrivia, audioFileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrivia", reflect.TypeOf((*MockTriviaDB)(nil).AddTrivia), ctx, newTrivia, audioFileName)
}

// GetNewTrivia mocks base method.
func (m *MockTriviaDB) GetNewTrivia() (*Trivia, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewTrivia")
	ret0, _ := ret[0].(*Trivia)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNewTrivia indicates an expected call of GetNewTrivia.
func (mr *MockTriviaDBMockRecorder) GetNewTrivia() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewTrivia", reflect.TypeOf((*MockTriviaDB)(nil).GetNewTrivia))
}

// MarkTriviaUsed mocks base method.
func (m *MockTriviaDB) MarkTriviaUsed(triviaId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTriviaUsed", triviaId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTriviaUsed indicates an expected call of MarkTriviaUsed.
func (mr *MockTriviaDBMockRecorder) MarkTriviaUsed(triviaId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTriviaUsed", reflect.TypeOf((*MockTriviaDB)(nil).MarkTriviaUsed), triviaId)
}

// RoundTypesList mocks base method.
func (m *MockTriviaDB) RoundTypesList() ([]*RoundType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTypesList")
	ret0, _ := ret[0].([]*RoundType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTypesList indicates an expected call of RoundTypesList.
func (mr *MockTriviaDBMockRecorder) RoundTypesList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTypesList", reflect.TypeOf((*MockTriviaDB)(nil).RoundTypesList))
}
